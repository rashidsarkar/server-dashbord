// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  image     String
  excerpt   String   @db.Text
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model SkillCategory {
  id          String   @id @default(uuid())
  title       String
  description String
  skills      Skill[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id         String        @id @default(uuid())
  name       String
  category   SkillCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model About {
  id         String      @id @default(uuid())
  name       String
  role       String
  bio        String
  experience String
  location   String
  email      String      @unique
  education  Education[]
  interests  String[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Education {
  id          String   @id @default(uuid())
  degree      String
  institution String
  year        String
  about       About    @relation(fields: [aboutId], references: [id])
  aboutId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id             String           @id @default(uuid())
  title          String
  image          String
  overview       String           @db.Text
  frontendTech   String[]
  backendTech    String[]
  databaseTech   String
  liveDemoLink   String?
  clientRepoLink String?
  serverRepoLink String?
  features       ProjectFeature[]
  featured       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  projectCredential projectCredential[]
}

model projectCredential {
  id        String   @id @default(uuid())
  email     String
  password  String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectFeature {
  id        String   @id @default(uuid())
  icon      String
  label     String
  gradient  String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
